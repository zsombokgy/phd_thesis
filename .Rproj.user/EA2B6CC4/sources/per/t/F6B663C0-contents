---
title: "05-ChapterFIVE"
author: "Gyula Zsombok"
date: "8/2/2019"
output: html_document
---

```{r libraries, message = FALSE, warning = FALSE}
library(readxl)
library(tidyverse)
library(tidytext)
library(stringr)
library(stringi)
library(ggplot2)
library(proustr)
library(topicmodels)
```

```{r load data, message = FALSE, warning = FALSE}
load("twitter_df.Rda")
twitter_df2 <- twitter_df %>%
  separate(date, c("ymd","hms"), sep = " ") %>%
  separate(ymd, c("year","month","day"), sep = "-") %>%
  select(lexical, borrow_type, year, content)

hashtag_quebec <- read_excel("/Users/gyuszi/Dropbox/Research/Twitter/02 PhD Research/hashtag-quebec.xlsx") %>%
  filter(city != "Pembroke") %>%
  filter(borrow_type != "motdiese") %>%
  separate(date, c("ymd","hms"), sep = " ") %>%
  separate(ymd, c("year","month","day"), sep = "-") %>%
  select(lexical, borrow_type, year, content) %>%
  mutate(lexical = as.factor(lexical),
         borrow_type = as.factor(borrow_type),
         borrow_type = recode(borrow_type, "english"="english", "prescribed"="motclic")) %>%
  select(borrow_type, year, content) %>%
  mutate(year = as.factor(ordered(year, levels = c("2011","2012","2013","2014","2015","2016")))) %>%
  filter(!is.na(year))

hashtag <- twitter_df2 %>%
  filter(lexical == "hashtag") %>%
  select(borrow_type, year, content) %>%
  mutate(year = as.factor(ordered(year, levels = c("2013","2014","2015","2016")))) %>%
  filter(!is.na(year))

cloud <- twitter_df2 %>%
  filter(lexical == "cloud") %>%
  select(borrow_type, year, content) %>%
  mutate(year = as.factor(ordered(year, levels = c("2010","2011","2012","2013","2014","2015","2016"))))

email <- twitter_df2 %>%
  filter(lexical == "email") %>%
  select(borrow_type, year, content) %>%
  mutate(year = as.factor(ordered(year, levels = c("2010","2011","2012","2013","2014","2015","2016"))))

trailer <- twitter_df2 %>%
  filter(lexical == "trailer") %>%
  select(borrow_type, year, content) %>%
  mutate(year = as.factor(ordered(year, levels = c("2010","2011","2012","2013","2014","2015","2016"))))
```

```{r tidy text, message = FALSE, warning = FALSE}
fr_stopwords <- proust_stopwords() %>%
  mutate(word = stri_trans_general(word, "Latin-ASCII"))
stp_tw <- as.character(c("http","https","rt","t.co","tt","cc","bit.ly","pa.net","to","you","the","for","your", "an", "and", "my", "our", "ours", "mine", "in","of","new","mov","is","liked","p", "ye"))
tw_stopwords <- as.data.frame(stp_tw) %>% rename(word = stp_tw)
en_stopwords <- tidytext::stop_words %>% select(word)
```

```{r function text df, message = FALSE, warning = FALSE}
textdf <- function(data){
  data %>%
  mutate(content = str_replace_all(content, "\u0027|\u2019|\u2018|\u02bc|\u02b9|\uff07", "e "),
         content = stri_trans_general(content, "Latin-ASCII"),
         content = str_remove_all(content, "@[:graph:]+"),
         content = str_remove_all(content, "http[:graph:]+"),
         content = str_remove_all(content, "[0-9]")) %>%
  unnest_tokens(word, content) %>%
  anti_join(fr_stopwords) %>%
  anti_join(tw_stopwords) %>%
  anti_join(en_stopwords) %>%
  pr_stem_words(word) %>%
  mutate(word = str_replace_all(word, "^mot_dies$|^motsdies$|^motdies$|^modies$|^mot$|^diese$|^dies$", "motdies"),
         word = str_replace_all(word, "^tweet$", "twitt"),
         word = str_replace_all(word, "^band$", "bande-annonce"),
         word = str_replace_all(word, "^annonc$", "bande-annonce"),
         word = str_replace_all(word, "^trail$", "trailer"),
         word = str_replace_all(word, "^lenvoi$|^envoi$", "envoy"),
         word = str_replace_all(word, "^sm$", "sms"),
         word = str_replace_all(word, "^met$", "mettr"),
         word = str_replace_all(word, "^official$", "officiel"),
         word = str_replace_all(word, "^hadop$", "hadopi")) %>%
  count(borrow_type, year, word, sort = TRUE) %>%
  mutate(n2 = log10(n)) %>%
  mutate(delete = case_when(borrow_type == "prescribed" & word == "motdies" ~ "delete",
                            borrow_type == "motclic" & word == "motclic" ~ "delete",
                            borrow_type == "prescribed" & word == "bande-annonce" ~ "delete",
                            borrow_type == "prescribed" & word == "nuag" ~ "delete",
                            borrow_type == "prescribed" & word == "courriel" ~ "delete",
                            borrow_type == "english" & word == "hashtag" ~ "delete",
                            borrow_type == "english" & word == "trailer" ~ "delete",
                            borrow_type == "english" & word == "cloud" ~ "delete",
                            borrow_type == "english" & word == "email" ~ "delete",
                            borrow_type == "english" & word == "mail" ~ "delete")) %>%
  filter(is.na(delete))
}
```

```{r implement text df, message = FALSE, warning = FALSE}
hashtag_df <- textdf(hashtag) %>%
    mutate(borrow_type = str_replace_all(borrow_type, "prescribed", "mot-dièse"),
         borrow_type = str_replace_all(borrow_type, "english", "hashtag"),
         borrow_type = relevel(as.factor(borrow_type), ref = "mot-dièse"))

email_df <- textdf(email) %>%
    mutate(borrow_type = str_replace_all(borrow_type, "prescribed", "courriel"),
         borrow_type = str_replace_all(borrow_type, "english", "email"),
         borrow_type = relevel(as.factor(borrow_type), ref = "courriel"))

cloud_df <- textdf(cloud) %>%
    mutate(borrow_type = str_replace_all(borrow_type, "prescribed", "nuage"),
         borrow_type = str_replace_all(borrow_type, "english", "cloud"),
         borrow_type = relevel(as.factor(borrow_type), ref = "nuage"))

trailer_df <- textdf(trailer) %>%
    mutate(borrow_type = str_replace_all(borrow_type, "prescribed", "bande-annonce"),
         borrow_type = str_replace_all(borrow_type, "english", "trailer"),
         borrow_type = relevel(as.factor(borrow_type), ref = "bande-annonce"))
```

```{r function text df QUEBEC, message = FALSE, warning = FALSE}
textdfQ <- function(data){
  data %>%
  mutate(content = str_replace_all(content, "\u0027|\u2019|\u2018|\u02bc|\u02b9|\uff07", "e "),
         content = stri_trans_general(content, "Latin-ASCII"),
         content = str_remove_all(content, "@[:graph:]+"),
         content = str_remove_all(content, "http[:graph:]+"),
         content = str_remove_all(content, "[0-9]")) %>%
  unnest_tokens(word, content) %>%
  anti_join(fr_stopwords) %>%
  anti_join(tw_stopwords) %>%
  anti_join(stop_words) %>%
  pr_stem_words(word) %>%
  mutate(word = str_replace_all(word, "^mot_dies$|^motsdies$|^motdies$|^modies$|^diese$|^dies$", "motdies"),
         word = str_replace_all(word, "^motcliqu$|^motclick$|^motsclic$|^mot$|^clic$", "motclic"),
         word = str_replace_all(word, "^tweet$", "twitt"),
         word = str_replace_all(word, "^band$", "bande-annonce"),
         word = str_replace_all(word, "^annonc$", "bande-annonce"),
         word = str_replace_all(word, "^trail$", "trailer"),
         word = str_replace_all(word, "^lenvoi$|^envoi$", "envoy"),
         word = str_replace_all(word, "^sm$", "sms"),
         word = str_replace_all(word, "^met$", "mettr"),
         word = str_replace_all(word, "^official$", "officiel"),
         word = str_replace_all(word, "^hadop$", "hadopi"),
         word = str_replace_all(word, "^nhlsubban$", "subban"),
         word = str_replace_all(word, "^canad$", "canada"),
         word = str_replace_all(word, "^lapress$", "lapresse"),
         word = str_replace_all(word, "^bellletstalk$", "bellcause"),
         word = str_replace_all(word, "^bellcaus$", "bellcause"),
         word = str_replace_all(word, "^bel$", "bellcause")) %>%
  count(borrow_type, year, word, sort = TRUE) %>%
  mutate(n2 = log10(n)) %>%
  mutate(delete = case_when(borrow_type == "motclic" & word == "motclic" ~ "delete",
                            borrow_type == "english" & word == "hashtag" ~ "delete")) %>%
  filter(is.na(delete))
}

hashtagQ_df <- textdfQ(hashtag_quebec) %>%
    mutate(borrow_type = str_replace_all(borrow_type, "motclic", "mot-clic"),
         borrow_type = str_replace_all(borrow_type, "english", "hashtag"),
         borrow_type = relevel(as.factor(borrow_type), ref = "mot-clic"))
```

```{r function plot frequent words, message = FALSE, warning = FALSE}
freqplot <- function(data){
  data %>%
  select(borrow_type, year, word, n2) %>%
  group_by(borrow_type, year) %>%
  top_n(10) %>%
  arrange(desc(n2)) %>%
  ungroup() %>%
  mutate(word = reorder(word, n2)) %>%
  ggplot(aes(x = word, y = n2, fill = borrow_type)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  facet_wrap(year ~ borrow_type, scales = "free_y", ncol = 2, strip.position = "right") +
  theme(text = element_text(size = 10, family = "Times"),
        strip.background = element_rect(fill = "white"),
        strip.text = element_text(size = 10, vjust = c(0)),
        axis.text.y = element_text(size = 9),
        axis.title = element_blank(),
        panel.background = element_rect(fill = 'white', color = 'black'),
        panel.border = element_rect(fill = "NA"))
}
```

```{r implement text df, message = FALSE, warning = FALSE}
hashtag_freqplot <- freqplot(hashtag_df)
hashtagQ_freqplot <- freqplot(hashtagQ_df)
email_freqplot <- freqplot(email_df)
cloud_freqplot <- freqplot(cloud_df)
trailer_freqplot <- freqplot(trailer_df)
```

```{r save diffplot, message = FALSE, warning, FALSE}
ggsave(hashtag_freqplot, filename = "Figure-hashtag-freqplot.png",
       width = 6.5, height = 8.75,  units = "in",
       family = "Times")

ggsave(hashtagQ_freqplot, filename = "Figure-hashtag-quebec-freqplot.png",
       width = 6.5, height = 8.75,  units = "in",
       family = "Times")

ggsave(email_freqplot, filename = "Figure-email-freqplot.png",
       width = 6.5, height = 8.75,  units = "in",
       family = "Times")

ggsave(cloud_freqplot, filename = "Figure-cloud-freqplot.png",
       width = 6.5, height = 8.75,  units = "in",
       family = "Times")

ggsave(trailer_freqplot, filename = "Figure-trailer-freqplot.png",
       width = 6.5, height = 8.75,  units = "in",
       family = "Times")
```

```{r create dtm, message = FALSE, warning = FALSE}
hashtag_dtm <- hashtag_df %>%
  unite(term_year, borrow_type, year, sep = "_") %>%
  cast_dtm(term_year, word, n)

hashtagQ_dtm <- hashtagQ_df %>%
  unite(term_year, borrow_type, year, sep = "_") %>%
  cast_dtm(term_year, word, n)

email_dtm <- email_df %>%
  unite(term_year, borrow_type, year, sep = "_") %>%
  cast_dtm(term_year, word, n)

trailer_dtm <- trailer_df %>%
  unite(term_year, borrow_type, year, sep = "_") %>%
  cast_dtm(term_year, word, n)

cloud_dtm <- cloud_df %>%
  unite(term_year, borrow_type, year, sep = "_") %>%
  cast_dtm(term_year, word, n)
```

```{r create lda, message = FALSE, warning = FALSE}
hashtag_lda <- LDA(hashtag_dtm, k = 2, control = list(seed = 1234))
hashtagQ_lda <- LDA(hashtagQ_dtm, k = 2, control = list(seed = 1234))
email_lda <- LDA(email_dtm, k = 2, control = list(seed = 1234))
trailer_lda <- LDA(trailer_dtm, k = 2, control = list(seed = 1234))
cloud_lda <- LDA(cloud_dtm, k = 2, control = list(seed = 1234))
```

```{r extract topics, message = FALSE, warning = FALSE}
hashtag_topics <- tidy(hashtag_lda, matrix = "beta") %>%
  mutate(topic2 = ifelse(topic == 2, "mot-dièse", "hashtag"),
         topic2 = relevel(as.factor(topic2), ref = "mot-dièse"))
hashtagQ_topics <- tidy(hashtagQ_lda, matrix = "beta") %>%
  mutate(topic2 = ifelse(topic == 1, "mot-clic", "hashtag"),
         topic2 = relevel(as.factor(topic2), ref = "mot-clic"))
email_topics <- tidy(email_lda, matrix = "beta") %>%
  mutate(topic2 = ifelse(topic == 1, "courriel", "email"),
         topic2 = relevel(as.factor(topic2), ref = "courriel"))
trailer_topics <- tidy(trailer_lda, matrix = "beta") %>%
  mutate(topic2 = ifelse(topic == 1, "bande-annonce", "trailer"),
         topic2 = relevel(as.factor(topic2), ref = "bande-annonce"))
cloud_topics <- tidy(cloud_lda, matrix = "beta") %>%
  mutate(topic2 = ifelse(topic == 1, "nuage", "cloud"),
         topic2 = relevel(as.factor(topic2), ref = "nuage"))
```

```{r function visualize topics, message = FALSE, warning = FALSE}
topterms <- function(data){
  data %>%
  group_by(topic) %>%
  top_n(15, beta) %>%
  ungroup() %>%
  arrange(topic, -beta) %>%
  mutate(term = reorder(term, beta)) %>%
  ggplot(aes(term, beta, fill = factor(topic2))) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~ topic2, scales = "free", strip.position = "right") +
  coord_flip() +
  theme(text = element_text(size = 9, family = "Times"),
        strip.background = element_rect(fill = "white"),
        strip.text = element_text(size = 9, vjust = c(0)),
        axis.text.y = element_text(size = 7),
        axis.title = element_blank(),
        panel.background = element_rect(fill = 'white', color = 'black'),
        panel.border = element_rect(fill = "NA"))
}
```

```{r topterms, warning = FALSE, message = FALSE}
cloud_topterms <- topterms(cloud_topics)
email_topterms <- topterms(email_topics)
trailer_topterms <- topterms(trailer_topics)
hashtag_topterms <- topterms(hashtag_topics)
hashtagQ_topterms <- topterms(hashtagQ_topics)
```

```{r print all topterms plot, warning = FALSE, message = FALSE}
laymatx <- rbind(c(1,1,1,1,1),
                 c(2,2,2,2,2),
                 c(3,3,3,3,3),
                 c(4,4,4,4,4),
                 c(5,5,5,5,5))

ggsave(filename = "Figure-Twitter-topterms.png",
       width = 6.5, height = 8.15,  units = "in",
       family = "Times",
       arrangeGrob(grobs = list(email_topterms, cloud_topterms,
                                trailer_topterms, hashtag_topterms,
                                hashtagQ_topterms),
                   layout_matrix = laymatx))
```

```{r save topic plots, warning = FALSE, message = FALSE}
ggsave(hashtag_topterms, filename = "Figure-hashtag-topicterms.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")

ggsave(hashtagQ_topterms, filename = "Figure-hashtag-quebec-topicterms.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")

ggsave(email_topterms, filename = "Figure-email-topicterms.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")

ggsave(cloud_topterms, filename = "Figure-cloud-topicterms.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")

ggsave(trailer_topterms, filename = "Figure-trailer-topicterms.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")
```

```{r function topic differences, message = FALSE, warning = FALSE}
betaspread <- function(data, amount){
  data %>%
  mutate(topic = paste0("topic", topic)) %>%
  spread(topic, beta) %>%
  filter(topic1 > amount | topic2 > amount) %>%
  mutate(log_ratio = log2(topic2 / topic1)) %>%
  mutate(term = reorder(term, log_ratio)) %>%
  ggplot(aes(term, log_ratio)) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  theme(text = element_text(size = 10, family = "Times"),
        strip.background = element_rect(fill = "white"),
        strip.text = element_text(size = 10, vjust = c(0)),
        axis.text.y = element_text(size = 9),
        axis.title = element_blank(),
        panel.background = element_rect(fill = 'white', color = 'black'),
        panel.border = element_rect(fill = "NA"))
}
```

```{r betaspread, warning = FALSE, message = FALSE}
hashtag_betaspread <- betaspread(hashtag_topics, .004)
hashtagQ_betaspread <- betaspread(hashtagQ_topics, .004)
email_betaspread <- betaspread(email_topics, .004)
cloud_betaspread <- betaspread(cloud_topics, .004)
trailer_betaspread <- betaspread(trailer_topics, .004)
```

```{r document topics, message = FALSE, warning = FALSE}
hashtag_documents <- tidy(hashtag_lda, matrix = "gamma") %>%
  separate(document, c("type", "year"), sep = "_", convert = TRUE) %>%
  mutate(type = str_replace_all(type, "prescribed", "mot-dièse"),
         type = str_replace_all(type, "english", "hashtag"),
         topic2 = ifelse(topic == 2, "prescribed", "english"),
         type = relevel(as.factor(type), ref = "mot-dièse"),
         topic2 = relevel(as.factor(topic2), ref = "prescribed"))

hashtagQ_documents <- tidy(hashtagQ_lda, matrix = "gamma") %>%
  separate(document, c("type", "year"), sep = "_", convert = TRUE) %>%
  mutate(type = str_replace_all(type, "motclic", "mot-clic"),
         type = str_replace_all(type, "english", "hashtag"),
         topic2 = ifelse(topic == 1, "prescribed", "english"),
         type = relevel(as.factor(type), ref = "mot-clic"),
         topic2 = relevel(as.factor(topic2), ref = "prescribed"))
  
email_documents <- tidy(email_lda, matrix = "gamma") %>%
  separate(document, c("type", "year"), sep = "_", convert = TRUE) %>%
  mutate(type = str_replace_all(type, "prescribed", "courriel"),
         type = str_replace_all(type, "english", "email"),
         topic2 = ifelse(topic == 1, "prescribed", "english"),
         type = relevel(as.factor(type), ref = "courriel"),
         topic2 = relevel(as.factor(topic2), ref = "prescribed"))

cloud_documents <- tidy(cloud_lda, matrix = "gamma") %>%
  separate(document, c("type", "year"), sep = "_", convert = TRUE) %>%
  mutate(type = str_replace_all(type, "prescribed", "nuage"),
         type = str_replace_all(type, "english", "cloud"),
         topic2 = ifelse(topic == 1, "prescribed", "english"),
         type = relevel(as.factor(type), ref = "nuage"),
         topic2 = relevel(as.factor(topic2), ref = "prescribed"))

trailer_documents <- tidy(trailer_lda, matrix = "gamma") %>%
  separate(document, c("type", "year"), sep = "_", convert = TRUE) %>%
  mutate(type = str_replace_all(type, "prescribed", "bande-annonce"),
         type = str_replace_all(type, "english", "trailer"),
         topic2 = ifelse(topic == 1, "prescribed", "english"),
         type = relevel(as.factor(type), ref = "bande-annonce"),
         topic2 = relevel(as.factor(topic2), ref = "prescribed"))
```

```{r function assign documents, warning = FALSE, message = FALSE}
assigndocuments <- function(data){
  data %>%
  ggplot(aes(topic2, gamma)) +
  geom_boxplot() +
  facet_wrap(~ type, strip.position = "top") +
  scale_y_continuous(limits = c(0,1), breaks = c(0,0.25,0.5,0.75,1),
                     labels = c("0",".25",".50",".75","1")) +
  theme(text = element_text(size = 9, family = "Times"),
        strip.background = element_rect(fill = "white"),
        strip.text = element_text(size = 9, vjust = c(0)),
        axis.text.y = element_text(size = 8),
        axis.text.x = element_text(size = 8),
        axis.title = element_blank(),
        panel.grid.major = element_line(color = "grey95"),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', color = 'black'),
        panel.border = element_rect(fill = "NA"))
}
```

```{r assign documents, warning = FALSE, message = FALSE}
hashtag_assigndocuments <- assigndocuments(hashtag_documents)
hashtagQ_assigndocuments <- assigndocuments(hashtagQ_documents)
email_assigndocuments <- assigndocuments(email_documents)
cloud_assigndocuments <- assigndocuments(cloud_documents)
trailer_assigndocuments <- assigndocuments(trailer_documents)
```

```{r print all assign plot, warning = FALSE, message = FALSE}
laymatx <- rbind(c(1,1,1,1,1),
                 c(2,2,2,2,2),
                 c(3,3,3,3,3),
                 c(4,4,4,4,4),
                 c(5,5,5,5,5))

ggsave(filename = "Figure-Twitter-assigned.png",
       width = 5, height = 8,  units = "in",
       family = "Times",
       arrangeGrob(grobs = list(email_assigndocuments, cloud_assigndocuments,
                                trailer_assigndocuments,
                                hashtag_assigndocuments, hashtagQ_assigndocuments),
                   layout_matrix = laymatx))
```

```{r save document plots, warning = FALSE, message = FALSE}
ggsave(hashtag_assigndocuments, filename = "Figure-hashtag-assigned.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")

ggsave(hashtagQ_assigndocuments, filename = "Figure-hashtag-quebec-assigned.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")

ggsave(email_assigndocuments, filename = "Figure-email-assigned.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")

ggsave(cloud_assigndocuments, filename = "Figure-cloud-assigned.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")

ggsave(trailer_assigndocuments, filename = "Figure-trailer-assigned.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")
```

```{r prescription sentiment data, warning = FALSE, message = FALSE}
hashtag_prescription <- twitter_df %>%
  filter(lexical == "hashtag", borrow_type == "prescribed",
         date > ymd_hms("2013-01-22 00:00:00"), date < ymd_hms("2013-01-29 00:00:00")) %>%
  select(country, content, sentiment) %>%
  mutate(content = str_replace_all(content, "\u0027|\u2019|\u2018|\u02bc|\u02b9|\uff07", "e "),
         #content = stri_trans_general(content, "Latin-ASCII"),
         content = str_remove_all(content, "@[:graph:]+"),
         content = str_remove_all(content, "http[:graph:]+"),
         content = str_remove_all(content, "[0-9]"),
         content = str_replace_all(content, "[:blank:]+", " "),
         content = str_remove_all(content, "^[:blank:]+|[:blank:]+$"),
         retweet = ifelse(grepl("^RT", content), TRUE, FALSE))

hashtag_prescriptionQ <- read_excel("/Users/gyuszi/Dropbox/Research/Twitter/02 PhD Research/hashtag-quebec.xlsx") %>%
  filter(city != "Pembroke") %>%
  filter(borrow_type == "motdiese",
         date > ymd_hms("2013-01-22 00:00:00"), date < ymd_hms("2013-01-29 00:00:00")) %>%
  select(country, content, sentiment) %>%
  mutate(country = as.factor(country),
         country = recode(country, "Canada" = "Quebec (mot-dièse)"),
         sentiment = as.factor(ordered(sentiment,
                                       levels=c('Basic Negative','Basic Neutral','Basic Positive'))),
         sentiment = recode(sentiment, 'Basic Negative' = "negative",
                            'Basic Neutral' = "neutral",
                            'Basic Positive' = "positive")) %>%
  mutate(content = str_replace_all(content, "\u0027|\u2019|\u2018|\u02bc|\u02b9|\uff07", "e "),
         #content = stri_trans_general(content, "Latin-ASCII"),
         content = str_remove_all(content, "@[:graph:]+"),
         content = str_remove_all(content, "http[:graph:]+"),
         content = str_remove_all(content, "[0-9]"),
         content = str_replace_all(content, "[:blank:]+", " "),
         content = str_remove_all(content, "^[:blank:]+|[:blank:]+$"),
         retweet = ifelse(grepl("^RT", content), TRUE, FALSE))

hashtag_prescriptionQ_motclic <- read_excel("/Users/gyuszi/Dropbox/Research/Twitter/02 PhD Research/hashtag-quebec.xlsx") %>%
  filter(city != "Pembroke") %>%
  filter(borrow_type == "prescribed",
         date > ymd_hms("2011-01-01 00:00:00"), date < ymd_hms("2011-04-01 00:00:00")) %>%
  select(country, content, sentiment) %>%
  mutate(country = as.factor(country),
         country = recode(country, "Canada" = "Quebec (mot-clic)"),
         sentiment = as.factor(ordered(sentiment,
                                       levels=c('Basic Negative','Basic Neutral','Basic Positive'))),
         sentiment = recode(sentiment, 'Basic Negative' = "negative",
                            'Basic Neutral' = "neutral",
                            'Basic Positive' = "positive")) %>%
  mutate(content = str_replace_all(content, "\u0027|\u2019|\u2018|\u02bc|\u02b9|\uff07", "e "),
         #content = stri_trans_general(content, "Latin-ASCII"),
         content = str_remove_all(content, "@[:graph:]+"),
         content = str_remove_all(content, "http[:graph:]+"),
         content = str_remove_all(content, "[0-9]"),
         content = str_replace_all(content, "[:blank:]+", " "),
         content = str_remove_all(content, "^[:blank:]+|[:blank:]+$"),
         retweet = ifelse(grepl("^RT", content), TRUE, FALSE))

motdiese_prescription <- rbind(hashtag_prescription,hashtag_prescriptionQ,hashtag_prescriptionQ_motclic) %>%
  filter(!is.na(country))
```

```{r prescription plot, warning = FALSE, message = FALSE}
sentiment_colors <- c("negative" = "orangered2", "neutral" = "dodgerblue2", "positive" = "green3")

hashtag_prescription_sentiment <- ggplot(motdiese_prescription, aes(x = country, fill = sentiment)) +
  geom_bar(aes(fill = as.factor(sentiment)), position = "fill") +
  scale_fill_manual(values = sentiment_colors) +
  labs(y = "Distribution", x = "Country (and variant)") +
  theme(text = element_text(size = 12, family = "Times"),
        strip.background = element_rect(fill = "white"),
        strip.text = element_text(size = 12, vjust = c(0)),
        axis.text.y = element_text(size = 10),
        axis.text.x = element_text(size = 10),
        panel.grid.major = element_line(color = "grey95"),
        panel.grid.minor = element_blank(),
        panel.background = element_rect(fill = 'white', color = 'black'),
        panel.border = element_rect(fill = "NA"))
```

```{r save sentiment plot, warning = FALSE, message = FALSE}
ggsave(hashtag_prescription_sentiment, filename = "Figure-hashtag-sentiment.png",
       width = 5.5, height = 3,  units = "in",
       family = "Times")
```